  $ ../../../../../../install/default/bin/stanc --auto-format hier-logit-centered.stan
data {
  int<lower=0> N;
  // items
  int<lower=0> K[N];
  // initial trials
  int<lower=0> y[N];
  // initial successes
}
parameters {
  real mu;
  // population mean of success log-odds
  real<lower=0> sigma;
  // population sd of success log-odds
  vector[N] alpha;
  // success log-odds
}
model {
  mu ~ normal(-1, 1);
  // hyperprior
  sigma ~ normal(0, 1);
  // hyperprior
  alpha ~ normal(mu, sigma);
  // prior (hierarchical)
  y ~ binomial_logit(K, alpha);
  // likelihood
}
generated quantities {
  vector[N] theta;
  // chance of success
  for (n in 1 : N) 
    theta[n] <- inv_logit(alpha[n]);
}


Warning: deprecated language construct used in 'hier-logit-centered.stan', line 21, column 14:
   -------------------------------------------------
    19:  
    20:    for (n in 1:N)
    21:      theta[n] <- inv_logit(alpha[n]);
                       ^
    22:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

  $ ../../../../../../install/default/bin/stanc --auto-format hier-logit.stan
data {
  int<lower=0> N;
  // items
  int<lower=0> K[N];
  // initial trials
  int<lower=0> y[N];
  // initial successes
  int<lower=0> K_new[N];
  // new trials
  int<lower=0> y_new[N];
  // new successes
}
transformed data {
  real min_y;
  // minimum successes
  real max_y;
  // maximum successes
  real mean_y;
  // sample mean successes
  real sd_y;
  // sample std dev successes
  min_y <- min(y);
  max_y <- max(y);
  mean_y <- mean(to_vector(y));
  sd_y <- sd(to_vector(y));
}
parameters {
  real mu;
  // population mean of success log-odds
  real<lower=0> sigma;
  // population sd of success log-odds
  vector[N] alpha_std;
  // success log-odds (standardized)
}
model {
  mu ~ normal(-1, 1);
  // hyperprior
  sigma ~ normal(0, 1);
  // hyperprior
  alpha_std ~ normal(0, 1);
  // prior (hierarchical)
  y ~ binomial_logit(K, mu + sigma * alpha_std);
  // likelihood
}
generated quantities {
  vector[N] theta;
  // chance of success
  real log_p_new;
  // posterior predictive log density remaining trials
  int<lower=0> z[N];
  // posterior prediction remaining trials
  int<lower=0, upper=1> some_ability_gt_350;
  // Pr[some theta > 0.35]
  int<lower=0, upper=1> avg_gt_400[N];
  // Pr[season avg of n] >= 0.400
  int<lower=0, upper=1> ability_gt_400[N];
  // Pr[chance-of-success of n] >= 0.400
  int<lower=1, upper=N> rnk[N];
  // rank of player n
  int<lower=0, upper=1> is_best[N];
  // Pr[player n highest chance of success]
  int<lower=0> y_rep[N];
  // replications for existing items
  int<lower=0> y_pop_rep[N];
  // replications for simulated items
  real min_y_rep;
  // posterior predictive min replicated successes
  real max_y_rep;
  // posterior predictive max replicated successes
  real mean_y_rep;
  // posterior predictive sample mean replicated successes
  real sd_y_rep;
  // posterior predictive sample std dev replicated successes
  int p_min;
  // posterior predictive p-values
  int p_max;
  int p_mean;
  int p_sd;
  for (n in 1 : N) 
    theta[n] <- inv_logit(mu + sigma * alpha_std[n]);
  log_p_new <- 0;
  for (n in 1 : N) 
    log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
  for (n in 1 : N) 
    z[n] <- binomial_rng(K_new[n], theta[n]);
  some_ability_gt_350 <- (max(theta) > 0.35);
  for (n in 1 : N) 
    avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
  for (n in 1 : N) 
    ability_gt_400[n] <- (theta[n] > 0.400);
  {
    int dsc[N];
    dsc <- sort_indices_desc(theta);
    for (n in 1 : N) 
      rnk[dsc[n]] <- n;
  }
  for (n in 1 : N) 
    is_best[n] <- (rnk[n] == 1);
  for (n in 1 : N) 
    y_rep[n] <- binomial_rng(K[n], theta[n]);
  for (n in 1 : N) 
    y_pop_rep[n] <- binomial_rng(K[n], inv_logit(normal_rng(mu, sigma)));
  min_y_rep <- min(y_rep);
  max_y_rep <- max(y_rep);
  mean_y_rep <- mean(to_vector(y_rep));
  sd_y_rep <- sd(to_vector(y_rep));
  p_min <- (min_y_rep >= min_y);
  p_max <- (max_y_rep >= max_y);
  p_mean <- (mean_y_rep >= mean_y);
  p_sd <- (sd_y_rep >= sd_y);
}


Warning: deprecated language construct used in 'hier-logit.stan', line 15, column 9:
   -------------------------------------------------
    13:    real sd_y;    // sample std dev successes
    14:  
    15:    min_y <- min(y);
                  ^
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 16, column 9:
   -------------------------------------------------
    14:  
    15:    min_y <- min(y);
    16:    max_y <- max(y);
                  ^
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 17, column 10:
   -------------------------------------------------
    15:    min_y <- min(y);
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
                   ^
    18:    sd_y <- sd(to_vector(y));
    19:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 18, column 8:
   -------------------------------------------------
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
                 ^
    19:  }
    20:  parameters {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 59, column 14:
   -------------------------------------------------
    57:  
    58:    for (n in 1:N)
    59:      theta[n] <- inv_logit(mu + sigma * alpha_std[n]);
                       ^
    60:  
    61:    log_p_new <- 0;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 61, column 13:
   -------------------------------------------------
    59:      theta[n] <- inv_logit(mu + sigma * alpha_std[n]);
    60:  
    61:    log_p_new <- 0;
                      ^
    62:    for (n in 1:N)
    63:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 63, column 15:
   -------------------------------------------------
    61:    log_p_new <- 0;
    62:    for (n in 1:N)
    63:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
                        ^
    64:  
    65:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 66, column 10:
   -------------------------------------------------
    64:  
    65:    for (n in 1:N)
    66:      z[n] <- binomial_rng(K_new[n], theta[n]);
                   ^
    67:  
    68:    some_ability_gt_350 <- (max(theta) > 0.35);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 68, column 23:
   -------------------------------------------------
    66:      z[n] <- binomial_rng(K_new[n], theta[n]);
    67:  
    68:    some_ability_gt_350 <- (max(theta) > 0.35);
                                ^
    69:    for (n in 1:N)
    70:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 70, column 19:
   -------------------------------------------------
    68:    some_ability_gt_350 <- (max(theta) > 0.35);
    69:    for (n in 1:N)
    70:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
                            ^
    71:    for (n in 1:N)
    72:      ability_gt_400[n] <- (theta[n] > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 72, column 23:
   -------------------------------------------------
    70:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
    71:    for (n in 1:N)
    72:      ability_gt_400[n] <- (theta[n] > 0.400);
                                ^
    73:  
    74:    {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 76, column 9:
   -------------------------------------------------
    74:    {
    75:      int dsc[N];
    76:      dsc <- sort_indices_desc(theta);
                  ^
    77:      for (n in 1:N)
    78:        rnk[dsc[n]] <- n;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 78, column 19:
   -------------------------------------------------
    76:      dsc <- sort_indices_desc(theta);
    77:      for (n in 1:N)
    78:        rnk[dsc[n]] <- n;
                            ^
    79:    }
    80:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 81, column 16:
   -------------------------------------------------
    79:    }
    80:    for (n in 1:N)
    81:      is_best[n] <- (rnk[n] == 1);
                         ^
    82:  
    83:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 84, column 14:
   -------------------------------------------------
    82:  
    83:    for (n in 1:N)
    84:      y_rep[n] <- binomial_rng(K[n], theta[n]);
                       ^
    85:    for (n in 1:N)
    86:      y_pop_rep[n] <- binomial_rng(K[n], inv_logit(normal_rng(mu, sigma)));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 86, column 18:
   -------------------------------------------------
    84:      y_rep[n] <- binomial_rng(K[n], theta[n]);
    85:    for (n in 1:N)
    86:      y_pop_rep[n] <- binomial_rng(K[n], inv_logit(normal_rng(mu, sigma)));
                           ^
    87:  
    88:    min_y_rep <- min(y_rep);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 88, column 13:
   -------------------------------------------------
    86:      y_pop_rep[n] <- binomial_rng(K[n], inv_logit(normal_rng(mu, sigma)));
    87:  
    88:    min_y_rep <- min(y_rep);
                      ^
    89:    max_y_rep <- max(y_rep);
    90:    mean_y_rep <- mean(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 89, column 13:
   -------------------------------------------------
    87:  
    88:    min_y_rep <- min(y_rep);
    89:    max_y_rep <- max(y_rep);
                      ^
    90:    mean_y_rep <- mean(to_vector(y_rep));
    91:    sd_y_rep <- sd(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 90, column 14:
   -------------------------------------------------
    88:    min_y_rep <- min(y_rep);
    89:    max_y_rep <- max(y_rep);
    90:    mean_y_rep <- mean(to_vector(y_rep));
                       ^
    91:    sd_y_rep <- sd(to_vector(y_rep));
    92:  
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 91, column 12:
   -------------------------------------------------
    89:    max_y_rep <- max(y_rep);
    90:    mean_y_rep <- mean(to_vector(y_rep));
    91:    sd_y_rep <- sd(to_vector(y_rep));
                     ^
    92:  
    93:    p_min <- (min_y_rep >= min_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 93, column 9:
   -------------------------------------------------
    91:    sd_y_rep <- sd(to_vector(y_rep));
    92:  
    93:    p_min <- (min_y_rep >= min_y);
                  ^
    94:    p_max <- (max_y_rep >= max_y);
    95:    p_mean <- (mean_y_rep >= mean_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 94, column 9:
   -------------------------------------------------
    92:  
    93:    p_min <- (min_y_rep >= min_y);
    94:    p_max <- (max_y_rep >= max_y);
                  ^
    95:    p_mean <- (mean_y_rep >= mean_y);
    96:    p_sd <- (sd_y_rep >= sd_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 95, column 10:
   -------------------------------------------------
    93:    p_min <- (min_y_rep >= min_y);
    94:    p_max <- (max_y_rep >= max_y);
    95:    p_mean <- (mean_y_rep >= mean_y);
                   ^
    96:    p_sd <- (sd_y_rep >= sd_y);
    97:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier-logit.stan', line 96, column 8:
   -------------------------------------------------
    94:    p_max <- (max_y_rep >= max_y);
    95:    p_mean <- (mean_y_rep >= mean_y);
    96:    p_sd <- (sd_y_rep >= sd_y);
                 ^
    97:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

  $ ../../../../../../install/default/bin/stanc --auto-format hier.stan
data {
  int<lower=0> N;
  // items
  int<lower=0> K[N];
  // initial trials
  int<lower=0> y[N];
  // initial successes
  int<lower=0> K_new[N];
  // new trials
  int<lower=0> y_new[N];
  // new successes
}
transformed data {
  real min_y;
  // minimum successes
  real max_y;
  // maximum successes
  real mean_y;
  // sample mean successes
  real sd_y;
  // sample std dev successes
  min_y <- min(y);
  max_y <- max(y);
  mean_y <- mean(to_vector(y));
  sd_y <- sd(to_vector(y));
}
parameters {
  real<lower=0, upper=1> phi;
  // population chance of success
  real<lower=1> kappa;
  // population concentration
  vector<lower=0, upper=1>[N] theta;
  // chance of success 
}
model {
  kappa ~ pareto(1, 1.5);
  // hyperprior
  theta ~ beta(phi * kappa, (1 - phi) * kappa);
  // prior
  y ~ binomial(K, theta);
  // likelihood
}
generated quantities {
  real log_p_new;
  // posterior predictive log density remaining trials
  int<lower=0> z[N];
  // posterior prediction remaining trials
  int<lower=0, upper=1> some_ability_gt_350;
  // Pr[some theta > 0.35]
  int<lower=0, upper=1> avg_gt_400[N];
  // Pr[season avg of n] >= 0.400
  int<lower=0, upper=1> ability_gt_400[N];
  // Pr[chance-of-success of n] >= 0.400
  int<lower=1, upper=N> rnk[N];
  // rank of player n
  int<lower=0, upper=1> is_best[N];
  // Pr[player n highest chance of success]
  int<lower=0> y_rep[N];
  // replications for existing items
  int<lower=0> y_pop_rep[N];
  // replications for simulated items
  real min_y_rep;
  // posterior predictive min replicated successes
  real max_y_rep;
  // posterior predictive max replicated successes
  real mean_y_rep;
  // posterior predictive sample mean replicated successes
  real sd_y_rep;
  // posterior predictive sample std dev replicated successes
  int p_min;
  // posterior predictive p-values
  int p_max;
  int p_mean;
  int p_sd;
  log_p_new <- 0;
  for (n in 1 : N) 
    log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
  for (n in 1 : N) 
    z[n] <- binomial_rng(K_new[n], theta[n]);
  some_ability_gt_350 <- (max(theta) > 0.35);
  for (n in 1 : N) 
    avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
  for (n in 1 : N) 
    ability_gt_400[n] <- (theta[n] > 0.400);
  {
    int dsc[N];
    dsc <- sort_indices_desc(theta);
    for (n in 1 : N) 
      rnk[dsc[n]] <- n;
  }
  for (n in 1 : N) 
    is_best[n] <- (rnk[n] == 1);
  for (n in 1 : N) 
    y_rep[n] <- binomial_rng(K[n], theta[n]);
  for (n in 1 : N) 
    y_pop_rep[n] <- binomial_rng(K[n],
                                 beta_rng(phi * kappa, (1 - phi) * kappa));
  min_y_rep <- min(y_rep);
  max_y_rep <- max(y_rep);
  mean_y_rep <- mean(to_vector(y_rep));
  sd_y_rep <- sd(to_vector(y_rep));
  p_min <- (min_y_rep >= min_y);
  p_max <- (max_y_rep >= max_y);
  p_mean <- (mean_y_rep >= mean_y);
  p_sd <- (sd_y_rep >= sd_y);
}


Warning: deprecated language construct used in 'hier.stan', line 15, column 9:
   -------------------------------------------------
    13:    real sd_y;    // sample std dev successes
    14:  
    15:    min_y <- min(y);
                  ^
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 16, column 9:
   -------------------------------------------------
    14:  
    15:    min_y <- min(y);
    16:    max_y <- max(y);
                  ^
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 17, column 10:
   -------------------------------------------------
    15:    min_y <- min(y);
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
                   ^
    18:    sd_y <- sd(to_vector(y));
    19:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 18, column 8:
   -------------------------------------------------
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
                 ^
    19:  }
    20:  parameters {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 55, column 13:
   -------------------------------------------------
    53:    int p_sd;
    54:  
    55:    log_p_new <- 0;
                      ^
    56:    for (n in 1:N)
    57:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 57, column 15:
   -------------------------------------------------
    55:    log_p_new <- 0;
    56:    for (n in 1:N)
    57:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
                        ^
    58:    
    59:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 60, column 10:
   -------------------------------------------------
    58:    
    59:    for (n in 1:N)
    60:      z[n] <- binomial_rng(K_new[n], theta[n]);
                   ^
    61:  
    62:    some_ability_gt_350 <- (max(theta) > 0.35);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 62, column 23:
   -------------------------------------------------
    60:      z[n] <- binomial_rng(K_new[n], theta[n]);
    61:  
    62:    some_ability_gt_350 <- (max(theta) > 0.35);
                                ^
    63:    for (n in 1:N)
    64:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K [n] + K_new[n])) > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 64, column 19:
   -------------------------------------------------
    62:    some_ability_gt_350 <- (max(theta) > 0.35);
    63:    for (n in 1:N)
    64:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K [n] + K_new[n])) > 0.400);
                            ^
    65:    for (n in 1:N)
    66:      ability_gt_400[n] <- (theta[n] > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 66, column 23:
   -------------------------------------------------
    64:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K [n] + K_new[n])) > 0.400);
    65:    for (n in 1:N)
    66:      ability_gt_400[n] <- (theta[n] > 0.400);
                                ^
    67:  
    68:    {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 70, column 9:
   -------------------------------------------------
    68:    {
    69:      int dsc[N];
    70:      dsc <- sort_indices_desc(theta);
                  ^
    71:      for (n in 1:N)
    72:        rnk[dsc[n]] <- n;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 72, column 19:
   -------------------------------------------------
    70:      dsc <- sort_indices_desc(theta);
    71:      for (n in 1:N)
    72:        rnk[dsc[n]] <- n;
                            ^
    73:    }
    74:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 75, column 16:
   -------------------------------------------------
    73:    }
    74:    for (n in 1:N)
    75:      is_best[n] <- (rnk[n] == 1);
                         ^
    76:  
    77:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 78, column 14:
   -------------------------------------------------
    76:  
    77:    for (n in 1:N)
    78:      y_rep[n] <- binomial_rng(K[n], theta[n]);
                       ^
    79:    for (n in 1:N)
    80:      y_pop_rep[n] <- binomial_rng(K[n], 
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 80, column 18:
   -------------------------------------------------
    78:      y_rep[n] <- binomial_rng(K[n], theta[n]);
    79:    for (n in 1:N)
    80:      y_pop_rep[n] <- binomial_rng(K[n], 
                           ^
    81:                                   beta_rng(phi * kappa,
    82:                                            (1 - phi) * kappa));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 84, column 13:
   -------------------------------------------------
    82:                                            (1 - phi) * kappa));
    83:  
    84:    min_y_rep <- min(y_rep);
                      ^
    85:    max_y_rep <- max(y_rep);
    86:    mean_y_rep <- mean(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 85, column 13:
   -------------------------------------------------
    83:  
    84:    min_y_rep <- min(y_rep);
    85:    max_y_rep <- max(y_rep);
                      ^
    86:    mean_y_rep <- mean(to_vector(y_rep));
    87:    sd_y_rep <- sd(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 86, column 14:
   -------------------------------------------------
    84:    min_y_rep <- min(y_rep);
    85:    max_y_rep <- max(y_rep);
    86:    mean_y_rep <- mean(to_vector(y_rep));
                       ^
    87:    sd_y_rep <- sd(to_vector(y_rep));
    88:  
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 87, column 12:
   -------------------------------------------------
    85:    max_y_rep <- max(y_rep);
    86:    mean_y_rep <- mean(to_vector(y_rep));
    87:    sd_y_rep <- sd(to_vector(y_rep));
                     ^
    88:  
    89:    p_min <- (min_y_rep >= min_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 89, column 9:
   -------------------------------------------------
    87:    sd_y_rep <- sd(to_vector(y_rep));
    88:  
    89:    p_min <- (min_y_rep >= min_y);
                  ^
    90:    p_max <- (max_y_rep >= max_y);
    91:    p_mean <- (mean_y_rep >= mean_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 90, column 9:
   -------------------------------------------------
    88:  
    89:    p_min <- (min_y_rep >= min_y);
    90:    p_max <- (max_y_rep >= max_y);
                  ^
    91:    p_mean <- (mean_y_rep >= mean_y);
    92:    p_sd <- (sd_y_rep >= sd_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 91, column 10:
   -------------------------------------------------
    89:    p_min <- (min_y_rep >= min_y);
    90:    p_max <- (max_y_rep >= max_y);
    91:    p_mean <- (mean_y_rep >= mean_y);
                   ^
    92:    p_sd <- (sd_y_rep >= sd_y);
    93:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hier.stan', line 92, column 8:
   -------------------------------------------------
    90:    p_max <- (max_y_rep >= max_y);
    91:    p_mean <- (mean_y_rep >= mean_y);
    92:    p_sd <- (sd_y_rep >= sd_y);
                 ^
    93:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

  $ ../../../../../../install/default/bin/stanc --auto-format no-pool.stan
data {
  int<lower=0> N;
  // items
  int<lower=0> K[N];
  // initial trials
  int<lower=0> y[N];
  // initial successes
  int<lower=0> K_new[N];
  // new trials
  int<lower=0> y_new[N];
  // new successes
}
transformed data {
  real min_y;
  // minimum successes
  real max_y;
  // maximum successes
  real mean_y;
  // sample mean successes
  real sd_y;
  // sample std dev successes
  min_y <- min(y);
  max_y <- max(y);
  mean_y <- mean(to_vector(y));
  sd_y <- sd(to_vector(y));
}
parameters {
  vector<lower=0, upper=1>[N] theta;
  // chance of success
}
model {
  y ~ binomial(K, theta);
  // likelihood
}
generated quantities {
  real log_p_new;
  // posterior predictive log density remaining trials
  int<lower=0> z[N];
  // posterior prediction remaining trials
  int<lower=0, upper=1> some_ability_gt_350;
  // Pr[some theta > 0.35]
  int<lower=0, upper=1> avg_gt_400[N];
  // Pr[season avg of n] >= 0.400
  int<lower=0, upper=1> ability_gt_400[N];
  // Pr[chance-of-success of n] >= 0.400
  int<lower=1, upper=N> rnk[N];
  // rank of player n
  int<lower=0, upper=1> is_best[N];
  // Pr[player n highest chance of success]
  int<lower=0> y_rep[N];
  // replications for existing items
  real min_y_rep;
  // posterior predictive min replicated successes
  real max_y_rep;
  // posterior predictive max replicated successes
  real mean_y_rep;
  // posterior predictive sample mean replicated successes
  real sd_y_rep;
  // posterior predictive sample std dev replicated successes
  int p_min;
  // posterior p-val for min test stat
  int p_max;
  // posterior p-val for max test stat
  int p_mean;
  // posterior p-val for sample mean test stat
  int p_sd;
  // posterior p-val for smaple std dev test stat
  log_p_new <- 0;
  for (n in 1 : N) 
    log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
  for (n in 1 : N) 
    z[n] <- binomial_rng(K_new[n], theta[n]);
  some_ability_gt_350 <- (max(theta) > 0.35);
  for (n in 1 : N) 
    avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
  for (n in 1 : N) 
    ability_gt_400[n] <- (theta[n] > 0.400);
  {
    int dsc[N];
    dsc <- sort_indices_desc(theta);
    for (n in 1 : N) 
      rnk[dsc[n]] <- n;
  }
  for (n in 1 : N) 
    is_best[n] <- (rnk[n] == 1);
  for (n in 1 : N) 
    y_rep[n] <- binomial_rng(K[n], theta[n]);
  min_y_rep <- min(y_rep);
  max_y_rep <- max(y_rep);
  mean_y_rep <- mean(to_vector(y_rep));
  sd_y_rep <- sd(to_vector(y_rep));
  p_min <- (min_y_rep >= min_y);
  p_max <- (max_y_rep >= max_y);
  p_mean <- (mean_y_rep >= mean_y);
  p_sd <- (sd_y_rep >= sd_y);
}


Warning: deprecated language construct used in 'no-pool.stan', line 15, column 9:
   -------------------------------------------------
    13:    real sd_y;    // sample std dev successes
    14:  
    15:    min_y <- min(y);
                  ^
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 16, column 9:
   -------------------------------------------------
    14:  
    15:    min_y <- min(y);
    16:    max_y <- max(y);
                  ^
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 17, column 10:
   -------------------------------------------------
    15:    min_y <- min(y);
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
                   ^
    18:    sd_y <- sd(to_vector(y));
    19:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 18, column 8:
   -------------------------------------------------
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
                 ^
    19:  }
    20:  parameters {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 50, column 13:
   -------------------------------------------------
    48:    int p_sd;     // posterior p-val for smaple std dev test stat
    49:  
    50:    log_p_new <- 0;
                      ^
    51:    for (n in 1:N)
    52:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 52, column 15:
   -------------------------------------------------
    50:    log_p_new <- 0;
    51:    for (n in 1:N)
    52:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
                        ^
    53:  
    54:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 55, column 10:
   -------------------------------------------------
    53:  
    54:    for (n in 1:N)
    55:      z[n] <- binomial_rng(K_new[n], theta[n]);
                   ^
    56:  
    57:    some_ability_gt_350 <- (max(theta) > 0.35);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 57, column 23:
   -------------------------------------------------
    55:      z[n] <- binomial_rng(K_new[n], theta[n]);
    56:  
    57:    some_ability_gt_350 <- (max(theta) > 0.35);
                                ^
    58:    for (n in 1:N)
    59:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 59, column 19:
   -------------------------------------------------
    57:    some_ability_gt_350 <- (max(theta) > 0.35);
    58:    for (n in 1:N)
    59:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
                            ^
    60:    for (n in 1:N)
    61:      ability_gt_400[n] <- (theta[n] > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 61, column 23:
   -------------------------------------------------
    59:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
    60:    for (n in 1:N)
    61:      ability_gt_400[n] <- (theta[n] > 0.400);
                                ^
    62:  
    63:    {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 65, column 9:
   -------------------------------------------------
    63:    {
    64:      int dsc[N];
    65:      dsc <- sort_indices_desc(theta);
                  ^
    66:      for (n in 1:N)
    67:        rnk[dsc[n]] <- n;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 67, column 19:
   -------------------------------------------------
    65:      dsc <- sort_indices_desc(theta);
    66:      for (n in 1:N)
    67:        rnk[dsc[n]] <- n;
                            ^
    68:    }
    69:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 70, column 16:
   -------------------------------------------------
    68:    }
    69:    for (n in 1:N)
    70:      is_best[n] <- (rnk[n] == 1);
                         ^
    71:  
    72:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 73, column 14:
   -------------------------------------------------
    71:  
    72:    for (n in 1:N)
    73:      y_rep[n] <- binomial_rng(K[n], theta[n]);
                       ^
    74:  
    75:    min_y_rep <- min(y_rep);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 75, column 13:
   -------------------------------------------------
    73:      y_rep[n] <- binomial_rng(K[n], theta[n]);
    74:  
    75:    min_y_rep <- min(y_rep);
                      ^
    76:    max_y_rep <- max(y_rep);
    77:    mean_y_rep <- mean(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 76, column 13:
   -------------------------------------------------
    74:  
    75:    min_y_rep <- min(y_rep);
    76:    max_y_rep <- max(y_rep);
                      ^
    77:    mean_y_rep <- mean(to_vector(y_rep));
    78:    sd_y_rep <- sd(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 77, column 14:
   -------------------------------------------------
    75:    min_y_rep <- min(y_rep);
    76:    max_y_rep <- max(y_rep);
    77:    mean_y_rep <- mean(to_vector(y_rep));
                       ^
    78:    sd_y_rep <- sd(to_vector(y_rep));
    79:  
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 78, column 12:
   -------------------------------------------------
    76:    max_y_rep <- max(y_rep);
    77:    mean_y_rep <- mean(to_vector(y_rep));
    78:    sd_y_rep <- sd(to_vector(y_rep));
                     ^
    79:  
    80:    p_min <- (min_y_rep >= min_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 80, column 9:
   -------------------------------------------------
    78:    sd_y_rep <- sd(to_vector(y_rep));
    79:  
    80:    p_min <- (min_y_rep >= min_y);
                  ^
    81:    p_max <- (max_y_rep >= max_y);
    82:    p_mean <- (mean_y_rep >= mean_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 81, column 9:
   -------------------------------------------------
    79:  
    80:    p_min <- (min_y_rep >= min_y);
    81:    p_max <- (max_y_rep >= max_y);
                  ^
    82:    p_mean <- (mean_y_rep >= mean_y);
    83:    p_sd <- (sd_y_rep >= sd_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 82, column 10:
   -------------------------------------------------
    80:    p_min <- (min_y_rep >= min_y);
    81:    p_max <- (max_y_rep >= max_y);
    82:    p_mean <- (mean_y_rep >= mean_y);
                   ^
    83:    p_sd <- (sd_y_rep >= sd_y);
    84:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'no-pool.stan', line 83, column 8:
   -------------------------------------------------
    81:    p_max <- (max_y_rep >= max_y);
    82:    p_mean <- (mean_y_rep >= mean_y);
    83:    p_sd <- (sd_y_rep >= sd_y);
                 ^
    84:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

  $ ../../../../../../install/default/bin/stanc --auto-format pool.stan
data {
  int<lower=0> N;
  // items
  int<lower=0> K[N];
  // initial trials
  int<lower=0> y[N];
  // initial successes
  int<lower=0> K_new[N];
  // new trials
  int<lower=0> y_new[N];
  // new successes
}
transformed data {
  real min_y;
  // minimum successes
  real max_y;
  // maximum successes
  real mean_y;
  // sample mean successes
  real sd_y;
  // sample std dev successes
  min_y <- min(y);
  max_y <- max(y);
  mean_y <- mean(to_vector(y));
  sd_y <- sd(to_vector(y));
}
parameters {
  real<lower=0, upper=1> phi;
  // chance of success (pooled)
}
model {
  y ~ binomial(K, phi);
  // likelihood
}
generated quantities {
  vector<lower=0, upper=1>[N] theta;
  // chance-of-success
  real log_p_new;
  // posterior predictive log density remaining trials
  int<lower=0> z[N];
  // posterior prediction remaining trials
  int<lower=0, upper=1> some_ability_gt_350;
  // Pr[some theta > 0.35]
  int<lower=0, upper=1> avg_gt_400[N];
  // Pr[season avg of n] >= 0.400
  int<lower=0, upper=1> ability_gt_400[N];
  // Pr[chance-of-success of n] >= 0.400
  int<lower=0> y_rep[N];
  // replications for existing items
  real<lower=0> min_y_rep;
  // posterior predictive min replicated successes
  real<lower=0> max_y_rep;
  // posterior predictive max replicated successes
  real<lower=0> mean_y_rep;
  // posterior predictive sample mean replicated successes
  real<lower=0> sd_y_rep;
  // posterior predictive sample std dev replicated successes
  int<lower=0, upper=1> p_min;
  // posterior predictive p-values
  int<lower=0, upper=1> p_max;
  int<lower=0, upper=1> p_mean;
  int<lower=0, upper=1> p_sd;
  theta <- rep_vector(phi, N);
  log_p_new <- 0;
  for (n in 1 : N) 
    log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
  for (n in 1 : N) 
    z[n] <- binomial_rng(K_new[n], theta[n]);
  some_ability_gt_350 <- (max(theta) > 0.35);
  for (n in 1 : N) 
    avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
  for (n in 1 : N) 
    ability_gt_400[n] <- (theta[n] > 0.400);
  for (n in 1 : N) 
    y_rep[n] <- binomial_rng(K[n], theta[n]);
  min_y_rep <- min(y_rep);
  max_y_rep <- max(y_rep);
  mean_y_rep <- mean(to_vector(y_rep));
  sd_y_rep <- sd(to_vector(y_rep));
  p_min <- (min_y_rep >= min_y);
  p_max <- (max_y_rep >= max_y);
  p_mean <- (mean_y_rep >= mean_y);
  p_sd <- (sd_y_rep >= sd_y);
}


Warning: deprecated language construct used in 'pool.stan', line 15, column 9:
   -------------------------------------------------
    13:    real sd_y;    // sample std dev successes
    14:  
    15:    min_y <- min(y);
                  ^
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 16, column 9:
   -------------------------------------------------
    14:  
    15:    min_y <- min(y);
    16:    max_y <- max(y);
                  ^
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 17, column 10:
   -------------------------------------------------
    15:    min_y <- min(y);
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
                   ^
    18:    sd_y <- sd(to_vector(y));
    19:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 18, column 8:
   -------------------------------------------------
    16:    max_y <- max(y);
    17:    mean_y <- mean(to_vector(y));
    18:    sd_y <- sd(to_vector(y));
                 ^
    19:  }
    20:  parameters {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 49, column 9:
   -------------------------------------------------
    47:    int<lower=0, upper=1> p_sd;
    48:  
    49:    theta <- rep_vector(phi, N);
                  ^
    50:  
    51:    log_p_new <- 0;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 51, column 13:
   -------------------------------------------------
    49:    theta <- rep_vector(phi, N);
    50:  
    51:    log_p_new <- 0;
                      ^
    52:    for (n in 1:N)
    53:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 53, column 15:
   -------------------------------------------------
    51:    log_p_new <- 0;
    52:    for (n in 1:N)
    53:      log_p_new <- log_p_new + binomial_log(y_new[n], K_new[n], theta[n]);
                        ^
    54:  
    55:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 56, column 10:
   -------------------------------------------------
    54:  
    55:    for (n in 1:N)
    56:      z[n] <- binomial_rng(K_new[n], theta[n]);
                   ^
    57:  
    58:    some_ability_gt_350 <- (max(theta) > 0.35);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 58, column 23:
   -------------------------------------------------
    56:      z[n] <- binomial_rng(K_new[n], theta[n]);
    57:  
    58:    some_ability_gt_350 <- (max(theta) > 0.35);
                                ^
    59:    for (n in 1:N)
    60:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 60, column 19:
   -------------------------------------------------
    58:    some_ability_gt_350 <- (max(theta) > 0.35);
    59:    for (n in 1:N)
    60:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
                            ^
    61:    for (n in 1:N)
    62:      ability_gt_400[n] <- (theta[n] > 0.400);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 62, column 23:
   -------------------------------------------------
    60:      avg_gt_400[n] <- (((y[n] + z[n]) / (0.0 + K[n] + K_new[n])) > 0.400);
    61:    for (n in 1:N)
    62:      ability_gt_400[n] <- (theta[n] > 0.400);
                                ^
    63:  
    64:    for (n in 1:N)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 65, column 14:
   -------------------------------------------------
    63:  
    64:    for (n in 1:N)
    65:      y_rep[n] <- binomial_rng(K[n], theta[n]);
                       ^
    66:  
    67:    min_y_rep <- min(y_rep);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 67, column 13:
   -------------------------------------------------
    65:      y_rep[n] <- binomial_rng(K[n], theta[n]);
    66:  
    67:    min_y_rep <- min(y_rep);
                      ^
    68:    max_y_rep <- max(y_rep);
    69:    mean_y_rep <- mean(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 68, column 13:
   -------------------------------------------------
    66:  
    67:    min_y_rep <- min(y_rep);
    68:    max_y_rep <- max(y_rep);
                      ^
    69:    mean_y_rep <- mean(to_vector(y_rep));
    70:    sd_y_rep <- sd(to_vector(y_rep));
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 69, column 14:
   -------------------------------------------------
    67:    min_y_rep <- min(y_rep);
    68:    max_y_rep <- max(y_rep);
    69:    mean_y_rep <- mean(to_vector(y_rep));
                       ^
    70:    sd_y_rep <- sd(to_vector(y_rep));
    71:  
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 70, column 12:
   -------------------------------------------------
    68:    max_y_rep <- max(y_rep);
    69:    mean_y_rep <- mean(to_vector(y_rep));
    70:    sd_y_rep <- sd(to_vector(y_rep));
                     ^
    71:  
    72:    p_min <- (min_y_rep >= min_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 72, column 9:
   -------------------------------------------------
    70:    sd_y_rep <- sd(to_vector(y_rep));
    71:  
    72:    p_min <- (min_y_rep >= min_y);
                  ^
    73:    p_max <- (max_y_rep >= max_y);
    74:    p_mean <- (mean_y_rep >= mean_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 73, column 9:
   -------------------------------------------------
    71:  
    72:    p_min <- (min_y_rep >= min_y);
    73:    p_max <- (max_y_rep >= max_y);
                  ^
    74:    p_mean <- (mean_y_rep >= mean_y);
    75:    p_sd <- (sd_y_rep >= sd_y);
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 74, column 10:
   -------------------------------------------------
    72:    p_min <- (min_y_rep >= min_y);
    73:    p_max <- (max_y_rep >= max_y);
    74:    p_mean <- (mean_y_rep >= mean_y);
                   ^
    75:    p_sd <- (sd_y_rep >= sd_y);
    76:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'pool.stan', line 75, column 8:
   -------------------------------------------------
    73:    p_max <- (max_y_rep >= max_y);
    74:    p_mean <- (mean_y_rep >= mean_y);
    75:    p_sd <- (sd_y_rep >= sd_y);
                 ^
    76:  }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

