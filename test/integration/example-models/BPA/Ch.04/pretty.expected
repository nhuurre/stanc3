  $ ../../../../../../install/default/bin/stanc --auto-format GLM0.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
}
parameters {
  real alpha;
}
transformed parameters {
  matrix[nyear, nsite] log_lambda;
  log_lambda = rep_matrix(alpha, nyear, nsite);
}
model {
  // Prior
  alpha ~ normal(0, 10);
  // Prior of log(mean count)
  // Likelihood
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLM1.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
}
parameters {
  vector[nsite] alpha;
}
transformed parameters {
  matrix[nyear, nsite] log_lambda;
  log_lambda = rep_matrix(alpha', nyear);
}
model {
  // Priors
  alpha ~ normal(0, 10);
  // Site effects
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLM2.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
}
parameters {
  vector[nsite] alpha;
  // Site effects
  vector[nyear - 1] eps2;
  // Year effects (year > 1)
}
transformed parameters {
  vector[nyear] eps;
  // Year effects
  matrix[nyear, nsite] log_lambda;
  eps[1] = 0;
  eps[2 : nyear] = eps2[1 : nyear - 1];
  log_lambda = rep_matrix(alpha', nyear) + rep_matrix(eps, nsite);
}
model {
  // Priors
  alpha ~ normal(0, 10);
  eps2 ~ normal(0, 10);
  // Likelihood
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLMM1.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
}
parameters {
  vector[nsite] alpha;
  // Random site effects
  real mu_alpha;
  real<lower=0, upper=5> sd_alpha;
}
transformed parameters {
  matrix[nyear, nsite] log_lambda;
  log_lambda = rep_matrix(alpha', nyear);
}
model {
  // Priors
  alpha ~ normal(mu_alpha, sd_alpha);
  mu_alpha ~ normal(0, 10);
  //  sd_alpha ~ uniform(0, 5);  // Implicitly defined
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLMM2.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
}
parameters {
  real mu;
  // Grand mean
  vector[nsite] alpha;
  // Random site effects
  real<lower=0, upper=5> sd_alpha;
  vector[nyear] eps;
  // Random year effects
  real<lower=0, upper=3> sd_eps;
}
transformed parameters {
  matrix[nyear, nsite] log_lambda;
  log_lambda = mu + rep_matrix(alpha', nyear) + rep_matrix(eps, nsite);
}
model {
  // Priors
  mu ~ normal(0, 10);
  alpha ~ normal(0, sd_alpha);
  //  sd_alpha ~ uniform(0, 5);  // Implicitly defined
  eps ~ normal(0, sd_eps);
  //  sd_eps ~ uniform(0, 3);    // Implicitly defined
  // Likelihood
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLMM3.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
  int<lower=0, upper=1> first[nyear, nsite];
  // First-year observer?
}
parameters {
  real mu;
  // Overall mean
  vector[nsite] alpha;
  // Random site effects
  real<lower=0, upper=5> sd_alpha;
  real beta2;
  // First-year observer effect
  vector[nyear] eps;
  // Random year effects
  real<lower=0, upper=5> sd_eps;
}
transformed parameters {
  matrix[nyear, nsite] log_lambda;
  for (j in 1 : nsite) 
    for (i in 1 : nyear) 
      log_lambda[i, j] = mu + beta2 * first[i, j] + alpha[j] + eps[i];
}
model {
  // Priors
  mu ~ normal(0, 10);
  beta2 ~ normal(0, 10);
  alpha ~ normal(0, sd_alpha);
  //  sd_alpha ~ uniform(0, 5);  // Implicitly defined
  eps ~ normal(0, sd_eps);
  //  sd_eps ~ uniform(0, 5);    // Implicitly defined
  // Likelihood
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLMM4.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
  int<lower=0, upper=1> first[nyear, nsite];
  // First-year observer?
  real year[nyear];
  // Year
}
parameters {
  real mu;
  // Overall intercept
  real beta1;
  // Overall trend
  real beta2;
  // First-year observer effect
  vector[nsite] alpha;
  // Random site effects
  real<lower=0, upper=5> sd_alpha;
  vector[nyear] eps;
  // Random year effects
  real<lower=0, upper=5> sd_eps;
}
transformed parameters {
  matrix[nyear, nsite] log_lambda;
  for (j in 1 : nsite) 
    for (i in 1 : nyear) 
      log_lambda[i, j] = mu + beta1 * year[i] + beta2 * first[i, j]
                         + alpha[j] + eps[i];
}
model {
  // Priors
  mu ~ normal(0, 10);
  beta1 ~ normal(0, 10);
  beta2 ~ normal(0, 10);
  alpha ~ normal(0, sd_alpha);
  //  sd_alpha ~ uniform(0, 5); // Implicitly defined
  eps ~ normal(0, sd_eps);
  //  sd_eps ~ uniform(0, 3);   // Implicitly defined
  // Likelihood
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLMM5.stan
data {
  int<lower=0> nobs;
  // Number of observed data
  int<lower=0> nmis;
  // Number of missing data
  int<lower=0> nyear;
  // Number of years
  int<lower=0> nsite;
  // Number of sites
  int<lower=0> obs[nobs];
  // Observed counts
  int<lower=0> obsyear[nobs];
  // Years in observed data
  int<lower=0> obssite[nobs];
  // Sites in observed data
  int<lower=0> misyear[nmis];
  // Years in missing data
  int<lower=0> missite[nmis];
  // Sites in missing data
  int<lower=0, upper=1> first[nyear, nsite];
  // First-year observer?
  real year[nyear];
  // Year
  int<lower=0> newobs[nyear, nsite];
  // Observers
  int<lower=0> nnewobs;
}
parameters {
  real mu;
  // Overall intercept
  real beta1;
  // Overall trend
  real beta2;
  // First-year observer effect
  vector[nsite] alpha;
  // Random site effects
  real<lower=0, upper=3> sd_alpha;
  vector[nyear] eps;
  // Random year effects
  real<lower=0, upper=1> sd_eps;
  vector[nnewobs] gamma;
  // Random observer effects
  real<lower=0, upper=1> sd_gamma;
}
transformed parameters {
  matrix[nyear, nsite] log_lambda;
  for (j in 1 : nsite) 
    for (i in 1 : nyear) 
      log_lambda[i, j] = mu + beta1 * year[i] + beta2 * first[i, j]
                         + alpha[j] + gamma[newobs[i, j]] + eps[i];
}
model {
  // Priors
  mu ~ normal(0, 10);
  beta1 ~ normal(0, 10);
  beta2 ~ normal(0, 10);
  alpha ~ normal(0, sd_alpha);
  //  sd_alpha ~ uniform(0, 3); // Implicitly defined
  eps ~ normal(0, sd_eps);
  //  sd_eps ~ uniform(0, 1);   // Implicitly defined
  gamma ~ normal(0, sd_gamma);
  //  sd_gamma ~ uniform(0, 1); // Implicitly defined
  // Likelihood
  for (i in 1 : nobs) 
    obs[i] ~ poisson_log(log_lambda[obsyear[i], obssite[i]]);
}
generated quantities {
  int<lower=0> mis[nmis];
  for (i in 1 : nmis) 
    mis[i] = poisson_log_rng(log_lambda[misyear[i], missite[i]]);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLMM_Poisson.stan
data {
  int<lower=0> n;
  // Number of years
  int<lower=0> C[n];
  // Counts
  vector[n] year;
  // Year
}
transformed data {
  vector[n] year_squared;
  vector[n] year_cubed;
  year_squared = year .* year;
  year_cubed = year .* year .* year;
}
parameters {
  real<lower=-20, upper=20> alpha;
  real<lower=-10, upper=10> beta1;
  real<lower=-10, upper=20> beta2;
  real<lower=-10, upper=10> beta3;
  vector[n] eps;
  // Year effects
  real<lower=0, upper=5> sigma;
}
transformed parameters {
  vector[n] log_lambda;
  // Linear predictor incl. random year effect
  log_lambda = alpha + beta1 * year + beta2 * year_squared
               + beta3 * year_cubed + eps;
}
model {
  // Priors
  alpha ~ uniform(-20, 20);
  beta1 ~ uniform(-10, 10);
  beta2 ~ uniform(-10, 10);
  beta3 ~ uniform(-10, 10);
  sigma ~ uniform(0, 5);
  // Likelihood
  C ~ poisson_log(log_lambda);
  eps ~ normal(0, sigma);
}
generated quantities {
  vector<lower=0>[n] lambda;
  lambda = exp(log_lambda);
}

  $ ../../../../../../install/default/bin/stanc --auto-format GLMM_Poisson2.stan
data {
  int<lower=0> nsite;
  // Number of populations
  int<lower=0> nyear;
  // Number of years
  int<lower=0> C[nyear, nsite];
  // Counts
  vector[nyear] year;
  // Year covariate
}
transformed data {
  vector[nyear] year_squared;
  vector[nyear] year_cubed;
  year_squared = year .* year;
  year_cubed = year .* year .* year;
}
parameters {
  real mu;
  vector[nsite] alpha;
  real eps[nyear];
  real beta[3];
  real<lower=0, upper=2> sd_alpha;
  real<lower=0, upper=1> sd_year;
}
transformed parameters {
  vector[nsite] log_lambda[nyear];
  // Linear predictor including random site and random year effects
  for (i in 1 : nyear) 
    log_lambda[i] = alpha + beta[1] * year[i] + beta[2] * year_squared[i]
                    + beta[3] * year_cubed[i] + eps[i];
}
model {
  // Priors
  // Random site effects
  alpha ~ normal(mu, sd_alpha);
  // Hyperparameter 1
  mu ~ normal(0, 10);
  // Hyperparameter 2
  //  sd_alpha ~ uniform(0, 2); // Implicitly defined
  beta ~ normal(0, 10);
  // Hyperparameter 3
  //  sd_year ~ uniform(0, 1); // Implicitly defined
  // Random year effects
  eps ~ normal(0, sd_year);
  // Likelihood
  for (i in 1 : nyear) {
    // Distribution for random part
    // Link function
    C[i] ~ poisson_log(log_lambda[i]);
  }
}

